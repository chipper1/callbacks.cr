crystal_doc_search_index_callback({"repository_name":"github.com/vladfaust/callbacks.cr","body":"# Callbacks\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![Build status](https://img.shields.io/travis/vladfaust/callbacks.cr/master.svg?style=flat-square)](https://travis-ci.org/vladfaust/callbacks.cr)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg?style=flat-square)](https://github.vladfaust.com/callbacks.cr)\n[![Releases](https://img.shields.io/github/release/vladfaust/callbacks.cr.svg?style=flat-square)](https://github.com/vladfaust/callbacks.cr/releases)\n[![Awesome](https://github.com/vladfaust/awesome/blob/badge-flat-alternative/media/badge-flat-alternative.svg)](https://github.com/veelenga/awesome-crystal)\n[![vladfaust.com](https://img.shields.io/badge/style-.com-lightgrey.svg?longCache=true&style=flat-square&label=vladfaust&colorB=0a83d8)](https://vladfaust.com)\n[![Patrons count](https://img.shields.io/badge/dynamic/json.svg?label=patrons&url=https://www.patreon.com/api/user/11296360&query=$.included[0].attributes.patron_count&style=flat-square&colorB=red&maxAge=86400)](https://www.patreon.com/vladfaust)\n\nAn expressive callbacks module for [Crystal](https://crystal-lang.org/).\n\n[![Become a Patron](https://vladfaust.com/img/patreon-small.svg)](https://www.patreon.com/vladfaust)\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  callbacks:\n    github: vladfaust/callbacks.cr\n    version: ~> 0.1.1\n```\n\nThis shard follows [Semantic Versioning 2.0.0](https://semver.org/), so see [releases](https://github.com/vladfaust/callbacks.cr/releases) and change the `version` accordingly.\n\n## Usage\n\n```crystal\nrequire \"callbacks\"\n\nclass Foo\n  include Callbacks\n\n  def call\n    with_callbacks { puts \"call\" }\n  end\n\n  before do\n    puts \"1\"; true # Must return truthy value for the callchain to proceed\n  end\n\n  before do\n    puts \"2\"; true\n  end\n\n  around do\n    puts \"3\"\n    yield\n    puts \"4\"\n  end\n\n  after do\n    puts \"5\"\n  end\n\n  after do\n    puts \"6\" # Will not be called because previous after callback returned falsey value\n  end\nend\n\nFoo.new.call\n# 1, 2, 3, call, 4, 5\n```\n\nObjects including `Callbacks` module can also be inherited preserving all callbacks:\n\n```crystal\nclass Bar < Foo\n  # Childrens before callbacks have higher precedence\n  before do\n    puts \"7\"; true\n  end\n\n  # Childrens around callbacks are higher in the stack\n  around do\n    puts \"8\"\n    yield\n    puts \"9\"\n  end\n\n  # Childrens after callbacks executed after parents'\n  after do\n    puts \"10\" # Will not be called as well because Foo's arounds stop at 5\n  end\nend\n\nBar.new.call\n# 7, 1, 2, 8, 3, call, 4, 9, 5\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/vladfaust/callbacks.cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [@vladfaust](https://github.com/vladfaust) Vlad Faust - creator, maintainer\n","program":{"html_id":"github.com/vladfaust/callbacks.cr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/vladfaust/callbacks.cr","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/vladfaust/callbacks.cr/Callbacks","path":"Callbacks.html","kind":"module","full_name":"Callbacks","name":"Callbacks","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"callbacks.cr","line_number":60,"url":"https://github.com/vladfaust/callbacks.cr/blob/5ef4cfba50bb18d33b4e27c92f8735fb66c2b87e/src/callbacks.cr"}],"repository_name":"github.com/vladfaust/callbacks.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"This module allows to define callbacks.\n\nExample usage:\n\n```\nrequire \"callbacks\"\n\nclass MyClass\n  include Callbacks\n\n  def call\n    with_callbacks do\n      puts \"call\"\n    end\n  end\n\n  before do\n    puts \"before\"; true # If any of `before` callbacks returns falsey value, the call is aborted\n  end\n\n  before do\n    puts \"another before\"; true\n  end\n\n  around do\n    puts \"begin around\"\n    yield\n    puts \"end around\"\n  end\n\n  around do\n    puts \"begin inner around\"\n    yield\n    puts \"end inner around\"\n  end\n\n  # After callbacks are always called despite of `around` return value\n  after do\n    puts \"after\"\n  end\n\n  after do\n    puts \"will not be called\" # Because previous after callback returns nil\n  end\nend\n\nMyClass.new.call\n\n# => before\n# => another before\n# => begin around\n# => begin inner around\n# => call\n# => end inner around\n# => end around\n# => after\n```\n\nObjects including `Callbacks` can be inherited, please refer to each method's description for more information.","summary":"<p>This module allows to define callbacks.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"with_callbacks(&block)-instance-method","html_id":"with_callbacks(&amp;block)-instance-method","name":"with_callbacks","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/vladfaust/callbacks.cr/blob/5ef4cfba50bb18d33b4e27c92f8735fb66c2b87e/src/callbacks.cr#L256","source_link":"https://github.com/vladfaust/callbacks.cr/blob/5ef4cfba50bb18d33b4e27c92f8735fb66c2b87e/src/callbacks.cr#L256","def":{"name":"with_callbacks","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"before && around do\n  yield\nend\nafter\n"}}],"macros":[{"id":"after-macro","html_id":"after-macro","name":"after","doc":"Add after callback.\n\nShould return truthy value, otherwise further after callbacks are not called.\n\nFurther after callbacks are called later in the scope of a single object. When defined in children, after callbacks have lower precedence:\n\n```\nclass Foo\n  include Callbacks\n\n  after do\n    puts \"1\"; true\n  end\n\n  after do\n    puts \"2\"; true\n  end\nend\n\nclass Bar < Foo\n  after do\n    puts \"3\" #  Falsey value aborts the callchain\n  end\n\n  after do\n    puts \"4\" # Will not be called\n  end\nend\n\nBar.new.with_callbacks { puts \"call\" }\n# => call, 1, 2, 3\n```","summary":"<p>Add after callback.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/callbacks.cr/blob/5ef4cfba50bb18d33b4e27c92f8735fb66c2b87e/src/callbacks.cr#L240","def":{"name":"after","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    def after\n      \n{% if @type.methods.find do |d|\n  d.name == \"after\"\nend %}\n        if previous_def\n          {{ (yield).id }}\n        end\n      {% else %}{% if @type.superclass && @type.superclass.methods.find do |d|\n  d.name == \"after\"\nend %}\n        if super\n          {{ (yield).id }}\n        end\n      {% else %}\n        {{ (yield).id }}\n      {% end %}{% end %}\n\n    \nend\n  \n"}},{"id":"around-macro","html_id":"around-macro","name":"around","doc":"Add around callback.\n\nAny value can be returned by this callback, this would not affect the callchain.\n\nFurther around callbacks are deeper in the stack. When inherited, childrens around callbacks will be higher in the stack than the super class'.\n\n\n```\nclass Foo\n  include Callbacks\n\n  around do\n    puts \"1\"\n    yield\n    puts \"2\"\n  end\n\n  around do\n    puts \"3\"\n    yield\n    puts \"4\"\n  end\nend\n\nclass Bar < Foo\n  around do\n    puts \"5\"\n    yield\n    puts \"6\"\n  end\n\n  around do\n    puts \"7\"\n    yield\n    puts \"8\"\n  end\nend\n\nBar.new.with_callbacks { puts \"call\" }\n# => 5, 7, 1, 3, call, 4, 2, 6, 8\n```","summary":"<p>Add around callback.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/callbacks.cr/blob/5ef4cfba50bb18d33b4e27c92f8735fb66c2b87e/src/callbacks.cr#L173","def":{"name":"around","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    def around(&block)\n      \n{% if existing = @type.methods.find do |d|\n  d.name == \"around\"\nend %}\n        {% if @type.superclass && @type.superclass.methods.any? do |d|\n  d.name == \"around\"\nend %}\n          {% body = \"\\n\" %}\n          {% for exp in (yield).expressions %}\n            {% if \"#{exp}\".includes?(\"yield\") %}\n              {% body = (body + (\"#{exp}\".gsub(/yield/, \"super{ yield }\"))) + \"\\n\" %}\n            {% else %}\n              {% body = (body + \"#{exp}\") + \"\\n\" %}\n            {% end %}\n          {% end %}\n          {% body = body + \"\\n\" %}\n          {{ (existing.body.stringify.gsub(/super\\(\\) do\\n  yield\\nend/, body)).id }}\n        {% else %}\n          previous_def do\n            {{ (yield).id }}\n          end\n        {% end %}\n      {% else %}\n        {% if @type.superclass && @type.superclass.methods.any? do |d|\n  d.name == \"around\"\nend %}\n          {% for exp in (yield).expressions %}\n            {% if \"#{exp}\".includes?(\"yield\") %}\n              {{ (\"#{exp}\".gsub(/yield/, \"super{ yield }\")).id }}\n            {% else %}\n              {{ exp.id }}\n            {% end %}\n          {% end %}\n        {% else %}\n          {{ (yield).id }}\n        {% end %}\n      {% end %}\n\n    \nend\n  \n"}},{"id":"before-macro","html_id":"before-macro","name":"before","doc":"Add before callback.\n\nShould return truthy value, otherwise the whole callback chain is aborted.\n\nFurther before callbacks are called later in the scope of a single object. When defined in children, before callbacks have higher precedence:\n\n```\nclass Foo\n  include Callbacks\n\n  before do\n    puts \"1\"; true\n  end\n\n  before do\n    puts \"2\" #  Falsey value aborts the callchain\n  end\n\n  before do\n    puts \"3\" # Will not be called\n  end\nend\n\nclass Bar < Foo\n  before do\n    puts \"4\"\n  end\nend\n\nBar.new.with_callbacks { puts \"call\" } # \"call\" will not be put\n# => 4, 1, 2\n```","summary":"<p>Add before callback.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/callbacks.cr/blob/5ef4cfba50bb18d33b4e27c92f8735fb66c2b87e/src/callbacks.cr#L113","def":{"name":"before","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    def before\n      \n{% if existing = @type.methods.find do |d|\n  d.name == \"before\"\nend %}\n        {% if @type.superclass && @type.superclass.methods.any? do |d|\n  d.name == \"before\"\nend %}\n          {% to_insert = \"#{yield} && super\" %}\n          {{ (existing.body.stringify.gsub(/super/, to_insert)).id }}\n        {% else %}\n          previous_def && {{ (yield).id }}\n        {% end %}\n      {% else %}\n        {% if @type.superclass && @type.superclass.methods.any? do |d|\n  d.name == \"before\"\nend %}\n          ({{ (yield).id }}) && super\n        {% else %}\n          {{ (yield).id }}\n        {% end %}\n      {% end %}\n\n    \nend\n  \n"}}],"types":[]}]}})